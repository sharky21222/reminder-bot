package main

import (
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("üö´ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err)
	}

	// Health-check
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
		w.Write([]byte("‚úÖ OK"))
	})
	go http.ListenAndServe(":8081", nil)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ..."),
			tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
		),
	)

	for upd := range updates {
		if upd.Message == nil {
			continue
		}
		msgText := strings.ToLower(upd.Message.Text)

		switch {
		case msgText == "/start":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É.")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		case msgText == "/help", strings.Contains(msgText, "–ø–æ–º–æ—â—å"):
			help := "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
				"/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /remind 10s –ø–æ–∑–≤–æ–Ω–∏—Ç—å)\n" +
				"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ <—Ç–µ–∫—Å—Ç> —á–µ—Ä–µ–∑ <–≤—Ä–µ–º—è> ‚Äî –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤—ã–π—Ç–∏ —á–µ—Ä–µ–∑ 5m)\n" +
				"/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏"
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, help))

		case msgText == "/menu":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		case strings.HasPrefix(msgText, "/remind"):
			handleRemind(bot, upd, msgText)

		case strings.HasPrefix(msgText, "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ"):
			parseNatural(bot, upd, msgText)

		default:
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "ü§ñ –ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."))
		}
	}
}

func handleRemind(bot *tgbotapi.BotAPI, upd tgbotapi.Update, text string) {
	parts := strings.SplitN(text, " ", 3)
	if len(parts) < 3 {
		bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID,
			"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>, –Ω–∞–ø—Ä–∏–º–µ—Ä /remind 10s –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤"))
		return
	}

	d, err := time.ParseDuration(parts[1])
	if err != nil {
		bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID,
			"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: 10s, 5m, 1h"))
		return
	}

	note := parts[2]
	bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚è≥ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ "+parts[1]))

	go func(id int64, delay time.Duration, msg string) {
		time.Sleep(delay)
		bot.Send(tgbotapi.NewMessage(id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+msg))
	}(upd.Message.Chat.ID, d, note)
}

func parseNatural(bot *tgbotapi.BotAPI, upd tgbotapi.Update, text string) {
	if !strings.Contains(text, "—á–µ—Ä–µ–∑") {
		bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚ùó –£–∫–∞–∂–∏ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –ø–æ–µ—Å—Ç—å —á–µ—Ä–µ–∑ 30m"))
		return
	}

	parts := strings.SplitN(text, "—á–µ—Ä–µ–∑", 2)
	if len(parts) < 2 {
		bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚ö†Ô∏è –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"))
		return
	}

	message := strings.TrimSpace(parts[0][len("–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ"):])
	duration := strings.TrimSpace(parts[1])

	d, err := time.ParseDuration(duration)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚õî –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∏–º–µ—Ä—ã: 10s, 5m, 1h"))
		return
	}

	bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚è≥ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ "+duration))

	go func(id int64, delay time.Duration, msg string) {
		time.Sleep(delay)
		bot.Send(tgbotapi.NewMessage(id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+msg))
	}(upd.Message.Chat.ID, d, message)
}
