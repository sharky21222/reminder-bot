package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Reminder struct {
	ChatID int64
	Note   string
	At     time.Time
}

var (
	// –ü–∞—Ä—Å–∏–º –ª—é–±—É—é —Ñ—Ä–∞–∑—É –≤–∏–¥–∞ "—á–∏—Å–ª–æ + –µ–¥–∏–Ω–∏—Ü–∞ + —Ç–µ–∫—Å—Ç"
	re        = regexp.MustCompile(`(\d+)\s*(—Å–µ–∫—É–Ω–¥[—ã]?|—Å–µ–∫|—Å|–º–∏–Ω—É—Ç[—ã]?|–º–∏–Ω|m|—á–∞—Å[–∞–æ–≤]?|—á|h)\s*(.*)`)
	reminders = make([]Reminder, 0)
	mu        sync.Mutex
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("üö´ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	// Health‚Äëcheck
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("OK"))
	})
	go http.ListenAndServe(":8081", nil)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ"),
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫"),
		),
	)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for upd := range updates {
		if upd.Message == nil {
			continue
		}
		text := strings.TrimSpace(strings.ToLower(upd.Message.Text))

		// /start –∏–ª–∏ "–ø—Ä–∏–≤–µ—Ç" ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
		if text == "/start" || strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") {
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç‚Äë–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.")
			msg.ReplyMarkup = menu
			bot.Send(msg)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥
		switch {
		// –ö–Ω–æ–ø–∫–∞ "üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ"
		case text == "üìù –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID,
				"‚úç –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n–Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		// –ö–Ω–æ–ø–∫–∞ "üìã –°–ø–∏—Å–æ–∫"
		case text == "üìã —Å–ø–∏—Å–æ–∫":
			sendList(bot, upd.Message.Chat.ID)

		// /help
		case text == "/help":
			help := "üìö –ö–æ–º–∞–Ω–¥—ã:\n" +
				"/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n" +
				"–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å\n" +
				"üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞\n" +
				"üìã –°–ø–∏—Å–æ–∫ ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, help))

		// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ª—é–±–æ–π —Ñ—Ä–∞–∑—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
		default:
			if dur, note, ok := parseAny(text); ok {
				schedule(bot, upd.Message.Chat.ID, dur, note)
			}
			// –∏–Ω–∞—á–µ –º–æ–ª—á–∏–º ‚Äî –º–µ–Ω—é —É–∂–µ –≤–∏–¥–Ω–æ –ø–æ—Å–ª–µ /start
		}
	}
}

func schedule(bot *tgbotapi.BotAPI, chatID int64, d time.Duration, note string) {
	at := time.Now().Add(d)
	mu.Lock()
	reminders = append(reminders, Reminder{ChatID: chatID, Note: note, At: at})
	mu.Unlock()

	bot.Send(tgbotapi.NewMessage(chatID, "‚è≥ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ "+d.String()))
	go func() {
		time.Sleep(d)
		bot.Send(tgbotapi.NewMessage(chatID, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+note))
		// —É–¥–∞–ª–∏—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–µ–µ
		mu.Lock()
		defer mu.Unlock()
		for i, r := range reminders {
			if r.ChatID == chatID && r.Note == note && r.At.Equal(at) {
				reminders = append(reminders[:i], reminders[i+1:]...)
				break
			}
		}
	}()
}

func sendList(bot *tgbotapi.BotAPI, chatID int64) {
	mu.Lock()
	defer mu.Unlock()
	var lines []string
	for _, r := range reminders {
		if r.ChatID == chatID {
			remaining := time.Until(r.At).Truncate(time.Second)
			lines = append(lines, fmt.Sprintf("‚Ä¢ %s (—á–µ—Ä–µ–∑ %s)", r.Note, remaining))
		}
	}
	if len(lines) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"))
	} else {
		bot.Send(tgbotapi.NewMessage(chatID, "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"+strings.Join(lines, "\n")))
	}
}

// parseAny –ª–æ–≤–∏—Ç –∏ "/remind 5s ...", –∏ "–Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ ...", –∏ "—á–µ—Ä–µ–∑ 5m ..."
func parseAny(text string) (time.Duration, string, bool) {
	// —É–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã
	text = strings.TrimPrefix(text, "/remind ")
	text = strings.TrimPrefix(text, "–Ω–∞–ø–æ–º–Ω–∏ ")
	// –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ, –µ–¥–∏–Ω–∏—Ü—É, –∑–∞–º–µ—Ç–∫—É
	m := re.FindStringSubmatch(text)
	if len(m) != 4 {
		return 0, "", false
	}
	num, unit, note := m[1], m[2], m[3]
	var suf string
	switch {
	case strings.HasPrefix(unit, "—Å–µ–∫"), unit == "—Å":
		suf = "s"
	case strings.HasPrefix(unit, "–º–∏–Ω"), unit == "m":
		suf = "m"
	case strings.HasPrefix(unit, "—á–∞—Å"), unit == "h", unit == "—á":
		suf = "h"
	default:
		return 0, "", false
	}
	d, err := time.ParseDuration(num + suf)
	if err != nil {
		return 0, "", false
	}
	return d, note, true
}
