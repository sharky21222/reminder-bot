package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"regexp"
	"sort"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Reminder struct {
	ID        string
	ChatID    int64
	Note      string
	At        time.Time
	Category  string
	Confirmed bool
}

var (
	re          = regexp.MustCompile(`(\d+)\s*(—Å–µ–∫—É–Ω–¥[—ã]?|—Å–µ–∫|—Å|–º–∏–Ω—É—Ç[—ã]?|–º–∏–Ω|m|—á–∞—Å[–∞–æ–≤]?|—á|h)`)
	wordRe      = regexp.MustCompile(`\p{L}+`)
	reminders   = make([]Reminder, 0)
	timers      = make(map[string]*time.Timer)
	pendingNote = make(map[int64]string) // chatID ‚Üí note, –æ–∂–∏–¥–∞–µ—Ç –≤—Ä–µ–º—è
	mu          sync.Mutex
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("üö´ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("OK"))
	})
	go http.ListenAndServe(":8081", nil)

	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ"),
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫"),
		),
	)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for upd := range updates {
		if upd.CallbackQuery != nil {
			handleCallback(bot, upd.CallbackQuery)
			continue
		}
		if upd.Message == nil {
			continue
		}
		chatID := upd.Message.Chat.ID
		text := strings.TrimSpace(strings.ToLower(upd.Message.Text))

		// –µ—Å–ª–∏ –∂–¥—ë–º –æ—Ç —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –≤—Ä–µ–º—è
		if note, ok := pendingNote[chatID]; ok {
			if m := re.FindStringSubmatch(text); len(m) == 3 {
				d, err := time.ParseDuration(m[1] + unitSuffix(m[2]))
				if err == nil {
					delete(pendingNote, chatID)
					schedule(bot, chatID, d, note)
					continue
				}
			}
			bot.Send(tgbotapi.NewMessage(chatID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: 10s, 5m, 1h"))
			continue
		}

		switch {
		case text == "/start" || strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç"):
			msg := tgbotapi.NewMessage(chatID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç‚Äë–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		case text == "üìù –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ":
			bot.Send(tgbotapi.NewMessage(chatID, "‚úç –ß—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?"))

		case text == "üìã —Å–ø–∏—Å–æ–∫":
			showList(bot, chatID)

		case text == "/help":
			bot.Send(tgbotapi.NewMessage(chatID,
				"üìö –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å ‚Äî –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç ‚Äú–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ?‚Äù\n"+
					"–ò–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"+
					"üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ ‚Äî –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"+
					"üìã –°–ø–∏—Å–æ–∫ ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"+
					"‚úÖ –ü–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã —è –ø–æ–≤—Ç–æ—Ä—é."))

		default:
			pendingNote[chatID] = upd.Message.Text
			bot.Send(tgbotapi.NewMessage(chatID, "‚è≥ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10s, 5m, 1h)"))
		}
	}
}

func schedule(bot *tgbotapi.BotAPI, chatID int64, d time.Duration, note string) {
	at := time.Now().Add(d)
	id := fmt.Sprintf("%d_%d", chatID, at.UnixNano())
	category := classify(note)

	rem := Reminder{ID: id, ChatID: chatID, Note: note, At: at, Category: category}
	mu.Lock()
	reminders = append(reminders, rem)
	mu.Unlock()

	timers[id] = time.AfterFunc(d, func() {
		btn := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "done_"+id)),
		)
		msg := tgbotapi.NewMessage(chatID, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+note)
		msg.ReplyMarkup = btn
		bot.Send(msg)

		time.AfterFunc(2*time.Minute, func() {
			mu.Lock()
			for _, r := range reminders {
				if r.ID == id && !r.Confirmed {
					bot.Send(tgbotapi.NewMessage(chatID, "üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+note))
					break
				}
			}
			mu.Unlock()
		})
	})

	bot.Send(tgbotapi.NewMessage(chatID,
		fmt.Sprintf("‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª! –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ %s (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s)", d.String(), category)))
}

func showList(bot *tgbotapi.BotAPI, chatID int64) {
	mu.Lock()
	defer mu.Unlock()

	groups := map[string][]Reminder{}
	for _, r := range reminders {
		if r.ChatID == chatID {
			groups[r.Category] = append(groups[r.Category], r)
		}
	}
	if len(groups) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"))
		return
	}

	cats := make([]string, 0, len(groups))
	for c := range groups {
		cats = append(cats, c)
	}
	sort.Strings(cats)

	var lines []string
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, cat := range cats {
		lines = append(lines, fmt.Sprintf("üîñ *%s*:", cat))
		for _, r := range groups[cat] {
			remaining := time.Until(r.At).Truncate(time.Second)
			lines = append(lines, fmt.Sprintf("‚Ä¢ %s (—á–µ—Ä–µ–∑ %s)", r.Note, remaining))
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å", r.ID),
			))
		}
		lines = append(lines, "")
	}

	msg := tgbotapi.NewMessage(chatID, strings.Join(lines, "\n"))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

func handleCallback(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery) {
	data := cq.Data
	if strings.HasPrefix(data, "done_") {
		id := strings.TrimPrefix(data, "done_")
		mu.Lock()
		for i, r := range reminders {
			if r.ID == id {
				reminders[i].Confirmed = true
				break
			}
		}
		mu.Unlock()
		bot.Send(tgbotapi.NewMessage(cq.Message.Chat.ID, "‚úÖ –°–ø–∞—Å–∏–±–æ, –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"))
	} else {
		id := data
		mu.Lock()
		if t, ok := timers[id]; ok {
			t.Stop()
			delete(timers, id)
		}
		removeByID(id)
		mu.Unlock()
		bot.Send(tgbotapi.NewMessage(cq.Message.Chat.ID, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"))
	}
	bot.Request(tgbotapi.NewCallback(cq.ID, "–ì–æ—Ç–æ–≤–æ"))
}

func removeByID(id string) {
	for i, r := range reminders {
		if r.ID == id {
			reminders = append(reminders[:i], reminders[i+1:]...)
			break
		}
	}
}

func classify(text string) string {
	switch {
	case containsRoot(text, "–∫–æ–¥", "–ø—Ä–æ–µ–∫—Ç", "–≤—Å—Ç—Ä–µ—á", "–º–∏—Ç–∏–Ω–≥", "–¥–µ–¥–ª–∞–π–Ω", "–æ—Ç—á–µ—Ç", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü", "–¥–æ–∫–ª–∞–¥", "–∑–∞–¥–∞—á", "—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω"):
		return "–†–∞–±–æ—Ç–∞"
	case containsRoot(text, "–ª–µ–∫—Ü", "—Å–µ–º–∏–Ω–∞—Ä", "–¥–∑", "—ç–∫–∑–∞–º–µ–Ω", "—Ç–µ—Å—Ç", "—Ä–µ—Ñ–µ—Ä–∞—Ç", "–∫—É—Ä—Å", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–∫–æ–ª–ª–µ–¥–∂", "—à–∫–æ–ª", "—É—á"):
		return "–£—á—ë–±–∞"
	case containsRoot(text, "—Å–ø–æ—Ä", "—Ç—Ä–µ–Ω–∏—Ä", "–ø—Ä–æ–≥—É–ª", "–∑–¥–æ—Ä–æ–≤", "–º–µ–¥–∏—Ü–∏–Ω", "–∞–ø—Ç–µ–∫", "–ª–µ–∫–∞—Ä—Å—Ç–≤", "–¥–∏–µ—Ç", "–≤—Ä–∞—á", "–∞–Ω–∞–ª–∏–∑", "–π–æ–≥", "–º–µ–¥–∏—Ç"):
		return "–ó–¥–æ—Ä–æ–≤—å–µ"
	case containsRoot(text, "—É–±–æ—Ä–∫", "—Å—Ç–∏—Ä–∫", "–≥–æ—Ç–æ–≤–∫", "–ø–æ–º—ã–≤", "—Ä–µ–º–æ–Ω—Ç", "–ø–æ—Å—É–¥", "–º—É—Å–æ—Ä", "–ø—Ä–∞—á–∫", "—Å–∞–¥"):
		return "–î–æ–º"
	case containsRoot(text, "–∫—É–ø", "–∑–∞–∫–∞–∑", "–ø–æ–ø–æ–ª–Ω", "–±—é–¥–∂–µ—Ç", "—Å—á–µ—Ç", "–æ–ø–ª–∞—Ç", "–ø–ª–∞—Ç–µ–∂", "–Ω–∞–ª–æ–≥", "–±–∞–Ω–∫", "–∫–∞—Ä—Ç", "—Ä–∞—Å—Ö–æ–¥"):
		return "–§–∏–Ω–∞–Ω—Å—ã"
	case containsRoot(text, "–∫–∏–Ω", "—Å–µ—Ä–∏–∞–ª", "–∏–≥—Ä", "–º—É–∑—ã–∫", "–∫–Ω–∏–∂", "–≤–µ—á–µ—Ä–∏–Ω–∫", "–æ—Ç–¥—ã—Ö", "–ø—É—Ç–µ—à–µ—Å—Ç–≤", "—Ö–æ–±–±–∏", "–∫–æ–Ω—Ü–µ—Ä—Ç"):
		return "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
	default:
		return "–î—Ä—É–≥–æ–µ"
	}
}

func containsRoot(text string, roots ...string) bool {
	words := wordRe.FindAllString(strings.ToLower(text), -1)
	for _, w := range words {
		for _, root := range roots {
			if strings.HasPrefix(w, root) || strings.HasPrefix(root, w) {
				return true
			}
		}
	}
	return false
}

func unitSuffix(u string) string {
	u = strings.ToLower(u)
	switch {
	case strings.HasPrefix(u, "—Å–µ–∫"):
		return "s"
	case strings.HasPrefix(u, "–º–∏–Ω"):
		return "m"
	case strings.HasPrefix(u, "—á"):
		return "h"
	}
	return ""
}

func parseAny(text string) (time.Duration, string, bool) {
	return 0, "", false
}
