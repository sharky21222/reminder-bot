package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"sync"
	"time"

	"github.com/araddon/dateparse"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Reminder struct {
	ID         string
	ChatID     int64
	Note       string
	At         time.Time
	Category   string
	NeedRepeat bool
}

var (
	re          = regexp.MustCompile(`(\d+)\s*(—Å–µ–∫—É–Ω–¥[—ã]?|—Å–µ–∫|—Å|–º–∏–Ω—É—Ç[—ã]?|–º–∏–Ω|m|—á–∞—Å[–∞–æ–≤]?|—á|h)`)
	wordRe      = regexp.MustCompile(`\p{L}+`)
	reminders   = make([]Reminder, 0)
	timers      = make(map[string]*time.Timer)
	pendingNote = make(map[int64]string)
	repeatFlag  = make(map[int64]bool)
	userCats    = make(map[int64]string)
	mu          sync.Mutex
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("üö´ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	// health-check
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("OK"))
	})
	go http.ListenAndServe(":8081", nil)

	// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ"),
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä –≤–∫–ª—é—á—ë–Ω"),
			tgbotapi.NewKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üè∑Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
		),
	)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for upd := range updates {
		if upd.CallbackQuery != nil {
			handleCallback(bot, upd.CallbackQuery)
			continue
		}
		if upd.Message == nil {
			continue
		}

		chatID := upd.Message.Chat.ID
		text := strings.TrimSpace(strings.ToLower(upd.Message.Text))

		switch text {
		case "/start", "–ø—Ä–∏–≤–µ—Ç":
			msg := tgbotapi.NewMessage(chatID,
				"üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ ¬´—á—Ç–æ –∫–æ–≥–¥–∞¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"+
					"  ‚Ä¢ ¬´10 –º–∞—è –≤ 14:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –∞–ø—Ç–µ–∫—É¬ª\n"+
					"  ‚Ä¢ –∏–ª–∏ ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω –ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å¬ª")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		case "üìù –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ":
			bot.Send(tgbotapi.NewMessage(chatID, "‚úç –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç + –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ:"))

		case "üìã —Å–ø–∏—Å–æ–∫":
			showList(bot, chatID)

		case "üîÅ –ø–æ–≤—Ç–æ—Ä –≤–∫–ª—é—á—ë–Ω":
			repeatFlag[chatID] = true
			bot.Send(tgbotapi.NewMessage(chatID, "üîÅ –ü–æ–≤—Ç–æ—Ä –≤–∫–ª—é—á—ë–Ω"))

		case "üîÅ –ø–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω":
			repeatFlag[chatID] = false
			bot.Send(tgbotapi.NewMessage(chatID, "üîÅ –ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω"))

		case "üè∑Ô∏è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
			userCats[chatID] = "pending"
			bot.Send(tgbotapi.NewMessage(chatID, "üîñ –í–≤–µ–¥–∏ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"))

		case "/help":
			bot.Send(tgbotapi.NewMessage(chatID,
				"üìö –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"+
					"  ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´—á—Ç–æ –∫–æ–≥–¥–∞¬ª\n"+
					"  ‚Ä¢ üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ ‚Äî –¥–∏–∞–ª–æ–≥\n"+
					"  ‚Ä¢ üìã –°–ø–∏—Å–æ–∫ ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"+
					"  ‚Ä¢ üîÅ –ü–æ–≤—Ç–æ—Ä ‚Äî –≤–∫–ª/–≤—ã–∫–ª\n"+
					"  ‚Ä¢ üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –∑–∞–¥–∞—Ç—å —Å–≤–æ—é"))
		default:
			// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			if userCats[chatID] == "pending" {
				userCats[chatID] = upd.Message.Text
				bot.Send(tgbotapi.NewMessage(chatID,
					"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "+upd.Message.Text))
				continue
			}
			// –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
			if at, err := dateparse.ParseLocal(upd.Message.Text); err == nil && at.After(time.Now()) {
				// –æ—Ç–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ü–∏—Ñ—Ä ‚Äî –≥—Ä—É–±–æ
				note := re.ReplaceAllString(upd.Message.Text, "")
				schedule(bot, chatID, time.Until(at), strings.TrimSpace(note))
				continue
			}
			// –¥–∏–∞–ª–æ–≥: –∂–¥—ë–º –≤—Ä–µ–º—è
			if note, ok := pendingNote[chatID]; ok {
				if m := re.FindStringSubmatch(text); len(m) == 3 {
					if d, err := time.ParseDuration(m[1] + unitSuffix(m[2])); err == nil {
						delete(pendingNote, chatID)
						schedule(bot, chatID, d, note)
						continue
					}
				}
				bot.Send(tgbotapi.NewMessage(chatID,
					"‚õî –í—Ä–µ–º—è –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∏–º–µ—Ä: 10s, 5m, 1h"))
				continue
			}
			// –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
			pendingNote[chatID] = upd.Message.Text
			bot.Send(tgbotapi.NewMessage(chatID,
				"‚è≥ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?"))
		}
	}
}

func schedule(bot *tgbotapi.BotAPI, chatID int64, d time.Duration, note string) {
	at := time.Now().Add(d)
	id := fmt.Sprintf("%d_%d", chatID, at.UnixNano())

	category := classify(note)
	if cat, ok := userCats[chatID]; ok && cat != "pending" {
		category = cat
	}
	repeat := repeatFlag[chatID]

	mu.Lock()
	reminders = append(reminders, Reminder{
		ID:         id,
		ChatID:     chatID,
		Note:       note,
		At:         at,
		Category:   category,
		NeedRepeat: repeat,
	})
	mu.Unlock()

	timer := time.AfterFunc(d, func() {
		msg := tgbotapi.NewMessage(chatID, "üîî "+note)
		if repeat {
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "done_"+id),
				),
			)
		}
		bot.Send(msg)

		if repeat {
			timers[id] = time.AfterFunc(1*time.Minute, func() {
				if stillExists(id) {
					bot.Send(tgbotapi.NewMessage(chatID, "üîÅ –ü–æ–≤—Ç–æ—Ä: "+note))
				}
			})
		}
	})
	timers[id] = timer

	bot.Send(tgbotapi.NewMessage(chatID,
		fmt.Sprintf("‚úÖ –ó–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ %s (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s)", d.String(), category)))
}

func showList(bot *tgbotapi.BotAPI, chatID int64) {
	mu.Lock()
	defer mu.Unlock()

	grouped := map[string][]Reminder{}
	for _, r := range reminders {
		if r.ChatID == chatID {
			grouped[r.Category] = append(grouped[r.Category], r)
		}
	}
	if len(grouped) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "üìã –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	var sb strings.Builder
	sb.WriteString("üìã *–°–ø–∏—Å–æ–∫*: \n\n")
	for cat, items := range grouped {
		sb.WriteString(fmt.Sprintf("üîñ *%s*:\n", cat))
		for _, r := range items {
			sb.WriteString(fmt.Sprintf("‚Ä¢ %s (—á–µ—Ä–µ–∑ %s)\n",
				r.Note, time.Until(r.At).Truncate(time.Second)))
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å", r.ID),
			))
		}
		sb.WriteString("\n")
	}

	msg := tgbotapi.NewMessage(chatID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

func handleCallback(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery) {
	bot.Request(tgbotapi.NewCallback(cq.ID, ""))
	data := cq.Data
	chatID := cq.Message.Chat.ID

	if strings.HasPrefix(data, "done_") {
		id := strings.TrimPrefix(data, "done_")
		mu.Lock()
		if t, ok := timers[id]; ok {
			t.Stop()
			delete(timers, id)
		}
		removeByID(id)
		mu.Unlock()
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"))
		return
	}

	mu.Lock()
	if t, ok := timers[data]; ok {
		t.Stop()
		delete(timers, data)
	}
	removeByID(data)
	mu.Unlock()
	bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –£–¥–∞–ª–µ–Ω–æ"))
}

func removeByID(id string) {
	for i, r := range reminders {
		if r.ID == id {
			reminders = append(reminders[:i], reminders[i+1:]...)
			return
		}
	}
}

func stillExists(id string) bool {
	mu.Lock()
	defer mu.Unlock()
	for _, r := range reminders {
		if r.ID == id {
			return true
		}
	}
	return false
}

func classify(text string) string {
	switch {
	case containsRoot(text, "–∫–æ–¥", "–ø—Ä–æ–µ–∫—Ç", "–¥–µ–¥–ª–∞–π–Ω"):
		return "–†–∞–±–æ—Ç–∞"
	case containsRoot(text, "–ª–µ–∫—Ü", "—ç–∫–∑–∞–º", "—à–∫–æ–ª"):
		return "–£—á—ë–±–∞"
	case containsRoot(text, "–≤—Ä–∞—á", "–∑–¥–æ—Ä–æ–≤", "–ª–µ–∫–∞—Ä—Å—Ç–≤"):
		return "–ó–¥–æ—Ä–æ–≤—å–µ"
	default:
		return "–î—Ä—É–≥–æ–µ"
	}
}

func containsRoot(text string, roots ...string) bool {
	words := wordRe.FindAllString(strings.ToLower(text), -1)
	for _, w := range words {
		for _, root := range roots {
			if strings.HasPrefix(w, root) || strings.HasPrefix(root, w) {
				return true
			}
		}
	}
	return false
}

func unitSuffix(u string) string {
	u = strings.ToLower(u)
	switch {
	case strings.HasPrefix(u, "—Å–µ–∫"):
		return "s"
	case strings.HasPrefix(u, "–º–∏–Ω"):
		return "m"
	case strings.HasPrefix(u, "—á"):
		return "h"
	default:
		return ""
	}
}
