package main

import (
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("üö´ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	// Health‚Äëcheck
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
		w.Write([]byte("OK"))
	})
	go http.ListenAndServe(":8081", nil)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ..."),
			tgbotapi.NewKeyboardButton("üìñ –ü–æ–º–æ—â—å"),
		),
	)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for upd := range updates {
		if upd.Message == nil {
			continue
		}
		text := strings.ToLower(upd.Message.Text)

		switch {
		// –°—Ç–∞—Ä—Ç
		case text == "/start":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		// –ü–æ–º–æ—â—å
		case text == "/help" || text == "üìñ –ø–æ–º–æ—â—å":
			help := "üìö –ö–æ–º–∞–Ω–¥—ã:\n" +
				"/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> ‚Äî –ø—Ä–∏–º–µ—Ä: /remind 10s –≤—ã–π—Ç–∏\n" +
				"–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ: —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å\n" +
				"/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏"
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, help).SetReplyMarkup(menu))

		// –ú–µ–Ω—é
		case text == "/menu":
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "üìã –ú–µ–Ω—é:").SetReplyMarkup(menu))

		// –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ..."
		case text == "üìù –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ...":
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID,
				"‚úç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏: —á–µ—Ä–µ–∑ 10s —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ").SetReplyMarkup(menu))

		// /remind
		case strings.HasPrefix(text, "/remind"):
			if dur, note, ok := parseNatural(text); ok {
				schedule(bot, upd.Message.Chat.ID, dur, note)
			} else {
				bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID,
					"‚õî –§–æ—Ä–º–∞—Ç: /remind 10s —Ç–µ–∫—Å—Ç –∏–ª–∏: —á–µ—Ä–µ–∑ 5m —Ç–µ–∫—Å—Ç").SetReplyMarkup(menu))
			}

		// –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥: "—á–µ—Ä–µ–∑ 5 —Å–µ–∫ ...", "—á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã ..."
		case strings.HasPrefix(text, "—á–µ—Ä–µ–∑ "):
			if dur, note, ok := parseNatural(text); ok {
				schedule(bot, upd.Message.Chat.ID, dur, note)
			} else {
				bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID,
					"‚õî –í—Ä–µ–º—è –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 10s —Ç–µ–∫—Å—Ç").SetReplyMarkup(menu))
			}

		// –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
		default:
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID,
				"ü§ñ –ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.").SetReplyMarkup(menu))
		}
	}
}

// schedule –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —á–µ—Ä–µ–∑ duration —à–ª—ë—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
func schedule(bot *tgbotapi.BotAPI, chatID int64, d time.Duration, note string) {
	bot.Send(tgbotapi.NewMessage(chatID, "‚è≥ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ "+d.String()))
	go func() {
		time.Sleep(d)
		bot.Send(tgbotapi.NewMessage(chatID, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+note))
	}()
}

// parseNatural —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç "—á–µ—Ä–µ–∑ N [s/m/h]" –∏–ª–∏ "/remind N[s/m/h] —Ç–µ–∫—Å—Ç"
func parseNatural(text string) (time.Duration, string, bool) {
	// –≤—ã–¥—ë—Ä–≥–∏–≤–∞–µ–º —á–∏—Å–ª–æ, –µ–¥–∏–Ω–∏—Ü—É –∏ —Ç–µ–∫—Å—Ç
	r := regexp.MustCompile(`(\d+)\s*(s|—Å–µ–∫—É–Ω–¥[—ã]?|—Å–µ–∫|m|–º–∏–Ω—É—Ç[—ã]?|–º–∏–Ω|h|—á–∞—Å[–∞–æ–≤]?|—á)\s*(.*)`)
	m := r.FindStringSubmatch(text)
	if len(m) < 4 {
		return 0, "", false
	}
	num, unit, note := m[1], m[2], m[3]

	// –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –µ–¥–∏–Ω–∏—Ü—É
	var suf string
	switch {
	case strings.HasPrefix(unit, "s"), unit == "—Å–µ–∫", strings.HasPrefix(unit, "—Å–µ–∫—É–Ω–¥"):
		suf = "s"
	case unit == "m", strings.HasPrefix(unit, "–º–∏–Ω"):
		suf = "m"
	case unit == "h", strings.HasPrefix(unit, "—á–∞—Å"), unit == "—á":
		suf = "h"
	default:
		return 0, "", false
	}

	dur, err := time.ParseDuration(num + suf)
	if err != nil {
		return 0, "", false
	}
	return dur, note, true
}
