package main

import (
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	// Health check
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
		w.Write([]byte("OK"))
	})
	go http.ListenAndServe(":8081", nil)

	// –ö–Ω–æ–ø–∫–∏
	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ..."),
			tgbotapi.NewKeyboardButton("üìñ –ü–æ–º–æ—â—å"),
		),
	)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for upd := range updates {
		if upd.Message == nil {
			continue
		}

		text := strings.ToLower(upd.Message.Text)

		switch {
		case text == "/start":
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.").SetReplyMarkup(menu))

		case text == "/help" || text == "üìñ –ø–æ–º–æ—â—å":
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID,
				`üõ† –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:
üëâ /remind 10s –°–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
üëâ –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø
üëâ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏`).SetReplyMarkup(menu))

		case text == "/menu":
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "üìã –ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ").SetReplyMarkup(menu))

		case text == "üìù –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ...":
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚úç –ù–∞–ø–∏—à–∏: \"–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ\""))

		case strings.HasPrefix(text, "/remind") || strings.HasPrefix(text, "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ —á–µ—Ä–µ–∑"):
			dur, msg, ok := parseNatural(text)
			if !ok {
				bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚õî –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∏–º–µ—Ä—ã: 10s, 5m, 1h"))
				continue
			}

			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ "+dur.String()))

			go func(id int64, d time.Duration, note string) {
				time.Sleep(d)
				bot.Send(tgbotapi.NewMessage(id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+note))
			}(upd.Message.Chat.ID, dur, msg)

		default:
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "ü§ñ –ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.").SetReplyMarkup(menu))
		}
	}
}

// parseNatural —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç –≤–∏–¥–∞ "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ —á—Ç–æ-—Ç–æ"
func parseNatural(text string) (time.Duration, string, bool) {
	r := regexp.MustCompile(`—á–µ—Ä–µ–∑ (\d+)\s?(—Å–µ–∫—É–Ω–¥|—Å–µ–∫|—Å|–º–∏–Ω—É—Ç|–º–∏–Ω|m|h|—á–∞—Å|—á)\s?(.*)`)
	match := r.FindStringSubmatch(text)
	if len(match) < 4 {
		return 0, "", false
	}

	num := match[1]
	unit := match[2]
	note := match[3]
	var suffix string

	switch unit {
	case "—Å–µ–∫—É–Ω–¥", "—Å–µ–∫", "—Å":
		suffix = "s"
	case "–º–∏–Ω—É—Ç", "–º–∏–Ω", "m":
		suffix = "m"
	case "—á–∞—Å", "—á", "h":
		suffix = "h"
	default:
		return 0, "", false
	}

	d, err := time.ParseDuration(num + suffix)
	if err != nil {
		return 0, "", false
	}
	return d, note, true
}
