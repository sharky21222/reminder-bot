package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Reminder struct {
	ID         string
	ChatID     int64
	Note       string
	At         time.Time
	Category   string
	NeedRepeat bool
}

var (
	// –¥–ª—è ¬´—á–µ—Ä–µ–∑ 5 —Å–µ–∫¬ª, ¬´10m¬ª, ¬´1h¬ª‚Ä¶
	reRel = regexp.MustCompile(`(?i)(?:—á–µ—Ä–µ–∑\s*)?(\d+)\s*(—Å–µ–∫—É–Ω–¥[—ã]?|—Å–µ–∫|—Å|–º–∏–Ω—É—Ç[—ã]?|–º–∏–Ω|m|—á–∞—Å[–∞–æ–≤]?|—á|h)`)
	// –¥–ª—è ¬´10 –º–∞—è –≤ 14:00 –∑–∞–º–µ—Ç–∫–∞¬ª
	reAbs = regexp.MustCompile(`(?i)^(?:–Ω–∞–ø–æ–º–Ω–∏(?:\s+–º–Ω–µ)?\s*)?(\d{1,2})\s*(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s*(?:–≤\s*)?(\d{1,2}):(\d{2})\s+(.+)$`)
	// –¥–ª—è ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 5:30 —Å–¥–µ–ª–∞—Ç—å‚Ä¶¬ª
	reTomorrow = regexp.MustCompile(`(?i)^(?:–Ω–∞–ø–æ–º–Ω–∏(?:\s+–º–Ω–µ)?\s*)?–∑–∞–≤—Ç—Ä–∞(?:\s*–≤\s*(\d{1,2})(?::|\.)(\d{2}))?\s+(.+)$`)

	monthMap = map[string]time.Month{
		"—è–Ω–≤–∞—Ä—è":   time.January,
		"—Ñ–µ–≤—Ä–∞–ª—è":  time.February,
		"–º–∞—Ä—Ç–∞":    time.March,
		"–∞–ø—Ä–µ–ª—è":   time.April,
		"–º–∞—è":      time.May,
		"–∏—é–Ω—è":     time.June,
		"–∏—é–ª—è":     time.July,
		"–∞–≤–≥—É—Å—Ç–∞":  time.August,
		"—Å–µ–Ω—Ç—è–±—Ä—è": time.September,
		"–æ–∫—Ç—è–±—Ä—è":  time.October,
		"–Ω–æ—è–±—Ä—è":   time.November,
		"–¥–µ–∫–∞–±—Ä—è":  time.December,
	}

	// —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
	repeatFlag  = make(map[int64]bool)   // –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏–ª–∏ –Ω–µ—Ç
	userCats    = make(map[int64]string) // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
	pendingNote = make(map[int64]string) // –∂–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

	// —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
	reminders = make([]Reminder, 0)
	timers    = make(map[string]*time.Timer)
	mu        sync.Mutex
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("üö´ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	// health-check
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("OK"))
	})
	go http.ListenAndServe(":8081", nil)

	// –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ"),
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä –≤–∫–ª"),
			tgbotapi.NewKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üè∑Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
		),
	)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for upd := range updates {
		// inline-–∫–Ω–æ–ø–∫–∏
		if upd.CallbackQuery != nil {
			handleCallback(bot, upd.CallbackQuery)
			continue
		}
		if upd.Message == nil {
			continue
		}

		chatID := upd.Message.Chat.ID
		text := strings.TrimSpace(upd.Message.Text)

		switch strings.ToLower(text) {
		case "/start", "–ø—Ä–∏–≤–µ—Ç":
			msg := tgbotapi.NewMessage(chatID,
				"üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ ¬´—á—Ç–æ –∫–æ–≥–¥–∞¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"+
					" ‚Ä¢ ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω –∫–æ—Ñ–µ–∏—Ç—å¬ª\n"+
					" ‚Ä¢ ¬´10 –º–∞—è –≤ 14:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –∞–ø—Ç–µ–∫—É¬ª")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		case "üìù –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ":
			bot.Send(tgbotapi.NewMessage(chatID, "‚úç –ù–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É –∏ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´—á–µ—Ä–µ–∑ 3 –º–∏–Ω –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é¬ª"))

		case "üìã —Å–ø–∏—Å–æ–∫":
			showList(bot, chatID)

		case "üîÅ –ø–æ–≤—Ç–æ—Ä –≤–∫–ª":
			repeatFlag[chatID] = true
			bot.Send(tgbotapi.NewMessage(chatID, "üîÅ –ü–æ–≤—Ç–æ—Ä –≤–∫–ª—é—á—ë–Ω"))

		case "üîÅ –ø–æ–≤—Ç–æ—Ä –≤—ã–∫–ª":
			repeatFlag[chatID] = false
			bot.Send(tgbotapi.NewMessage(chatID, "üîÅ –ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω"))

		case "üè∑Ô∏è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
			userCats[chatID] = "pending"
			bot.Send(tgbotapi.NewMessage(chatID, "üîñ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"))

		case "/help":
			bot.Send(tgbotapi.NewMessage(chatID,
				"üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"+
					" ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´—á—Ç–æ –∫–æ–≥–¥–∞¬ª –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n"+
					" ‚Ä¢ üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ ‚Äî –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"+
					" ‚Ä¢ üìã –°–ø–∏—Å–æ–∫ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"+
					" ‚Ä¢ üîÅ –ü–æ–≤—Ç–æ—Ä –≤–∫–ª/–≤—ã–∫–ª ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä\n"+
					" ‚Ä¢ üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –∑–∞–¥–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"))

		default:
			// –µ—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			if userCats[chatID] == "pending" {
				userCats[chatID] = text
				bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: "+text))
				continue
			}
			// –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			if at, note, ok := parseInput(text); ok {
				schedule(bot, chatID, time.Until(at), note)
				continue
			}
			// —É—Ç–æ—á–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∑–∞–º–µ—Ç–∫–∏
			if note, ok := pendingNote[chatID]; ok {
				if m := reRel.FindStringSubmatch(text); len(m) == 3 {
					if d, err := time.ParseDuration(m[1] + unitSuffix(m[2])); err == nil {
						delete(pendingNote, chatID)
						schedule(bot, chatID, d, note)
						continue
					}
				}
				bot.Send(tgbotapi.NewMessage(chatID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 10s, 5m, 1h"))
				continue
			}
			// –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥: —Å–æ—Ö—Ä–∞–Ω–∏–º –∑–∞–º–µ—Ç–∫—É –∏ —Å–ø—Ä–æ—Å–∏–º –≤—Ä–µ–º—è
			pendingNote[chatID] = text
			bot.Send(tgbotapi.NewMessage(chatID, "‚è≥ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?"))
		}
	}
}

// parseInput –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –≤ –¥–∞—Ç—É+–∑–∞–º–µ—Ç–∫—É
func parseInput(text string) (time.Time, string, bool) {
	now := time.Now()
	// 1) –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –¥–∞—Ç–∞
	if m := reAbs.FindStringSubmatch(text); len(m) == 6 {
		day := toInt(m[1])
		mon := monthMap[strings.ToLower(m[2])]
		hour := toInt(m[3])
		min := toInt(m[4])
		note := m[5]
		at := time.Date(now.Year(), mon, day, hour, min, 0, 0, now.Location())
		if at.Before(now) {
			at = at.AddDate(1, 0, 0)
		}
		return at, note, true
	}
	// 2) –∑–∞–≤—Ç—Ä–∞
	if m := reTomorrow.FindStringSubmatch(text); len(m) == 4 {
		h := 9
		mi := 0
		if m[1] != "" {
			h = toInt(m[1])
			if m[2] != "" {
				mi = toInt(m[2])
			}
		}
		note := m[3]
		at := time.Date(now.Year(), now.Month(), now.Day()+1, h, mi, 0, 0, now.Location())
		return at, note, true
	}
	// 3) —á–µ—Ä–µ–∑
	if m := reRel.FindStringSubmatch(text); len(m) == 3 {
		if d, err := time.ParseDuration(m[1] + unitSuffix(m[2])); err == nil {
			note := reRel.ReplaceAllString(text, "")
			return now.Add(d), strings.TrimSpace(note), true
		}
	}
	return time.Time{}, "", false
}

func schedule(bot *tgbotapi.BotAPI, chatID int64, d time.Duration, note string) {
	at := time.Now().Add(d)
	id := fmt.Sprintf("%d_%d", chatID, at.UnixNano())
	cat := classify(note)
	if c := userCats[chatID]; c != "" {
		cat = c
	}
	rep := repeatFlag[chatID]

	mu.Lock()
	reminders = append(reminders, Reminder{ID: id, ChatID: chatID, Note: note, At: at, Category: cat, NeedRepeat: rep})
	mu.Unlock()

	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	time.AfterFunc(d, func() {
		msg := tgbotapi.NewMessage(chatID, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+note)
		if rep {
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "done_"+id),
				),
			)
		}
		bot.Send(msg)

		if rep {
			// —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–µ–Ω–æ
			timers[id] = time.AfterFunc(1*time.Minute, func() {
				if stillExists(id) {
					bot.Send(tgbotapi.NewMessage(chatID, "üîÅ –ü–æ–≤—Ç–æ—Ä: "+note))
				}
			})
		}
	})

	bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ó–∞–ø–æ–º–Ω—é!"))
}

func showList(bot *tgbotapi.BotAPI, chatID int64) {
	mu.Lock()
	defer mu.Unlock()
	g := map[string][]Reminder{}
	for _, r := range reminders {
		if r.ChatID == chatID {
			g[r.Category] = append(g[r.Category], r)
		}
	}
	if len(g) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "üìã –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	var sb strings.Builder
	sb.WriteString("üìã *–°–ø–∏—Å–æ–∫*:\n\n")
	for cat, items := range g {
		sb.WriteString(fmt.Sprintf("üîñ *%s*:\n", cat))
		for _, r := range items {
			rem := time.Until(r.At).Truncate(time.Second)
			sb.WriteString(fmt.Sprintf("‚Ä¢ %s (—á–µ—Ä–µ–∑ %s)\n", r.Note, rem))
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å", r.ID),
			))
		}
		sb.WriteString("\n")
	}

	msg := tgbotapi.NewMessage(chatID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

func handleCallback(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery) {
	// –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Telegram
	bot.Request(tgbotapi.NewCallback(cq.ID, ""))

	data := cq.Data
	chatID := cq.Message.Chat.ID

	if strings.HasPrefix(data, "done_") {
		id := strings.TrimPrefix(data, "done_")
		mu.Lock()
		removeTimerAndReminder(id)
		mu.Unlock()
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"))
		return
	}

	mu.Lock()
	removeTimerAndReminder(data)
	mu.Unlock()
	bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –£–¥–∞–ª–µ–Ω–æ"))
}

func removeTimerAndReminder(id string) {
	if t, ok := timers[id]; ok {
		t.Stop()
		delete(timers, id)
	}
	for i, r := range reminders {
		if r.ID == id {
			reminders = append(reminders[:i], reminders[i+1:]...)
			return
		}
	}
}

func stillExists(id string) bool {
	for _, r := range reminders {
		if r.ID == id {
			return true
		}
	}
	return false
}

func classify(text string) string {
	l := strings.ToLower(text)
	switch {
	case strings.Contains(l, "–∫–æ–¥"), strings.Contains(l, "–ø—Ä–æ–µ–∫—Ç"), strings.Contains(l, "–¥–µ–¥–ª–∞–π–Ω"):
		return "–†–∞–±–æ—Ç–∞"
	case strings.Contains(l, "–ª–µ–∫—Ü"), strings.Contains(l, "—ç–∫–∑–∞–º"), strings.Contains(l, "—à–∫–æ–ª"):
		return "–£—á—ë–±–∞"
	case strings.Contains(l, "–≤—Ä–∞—á"), strings.Contains(l, "–∑–¥–æ—Ä–æ–≤"), strings.Contains(l, "–ª–µ–∫–∞—Ä—Å—Ç–≤"):
		return "–ó–¥–æ—Ä–æ–≤—å–µ"
	default:
		return "–î—Ä—É–≥–æ–µ"
	}
}

func unitSuffix(u string) string {
	u = strings.ToLower(u)
	switch {
	case strings.HasPrefix(u, "—Å–µ–∫"):
		return "s"
	case strings.HasPrefix(u, "–º–∏–Ω"):
		return "m"
	case strings.HasPrefix(u, "—á"):
		return "h"
	}
	return ""
}

func toInt(s string) int {
	n, _ := strconv.Atoi(s)
	return n
}
