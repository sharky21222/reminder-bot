package main

import (
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("üö´ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	// Health‚Äëcheck endpoint
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("OK"))
	})
	go http.ListenAndServe(":8081", nil)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ"),
			tgbotapi.NewKeyboardButton("üìñ –ü–æ–º–æ—â—å"),
		),
	)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for upd := range updates {
		if upd.Message == nil {
			continue
		}
		text := strings.TrimSpace(strings.ToLower(upd.Message.Text))

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–ø—Ä–∏–≤–µ—Ç" anywhere
		if strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") {
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.")
			msg.ReplyMarkup = menu
			bot.Send(msg)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
		switch {
		// /start
		case text == "/start":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		// –∫–Ω–æ–ø–∫–∞ "üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ"
		case text == "üìù –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "‚úç –í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		// /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â—å
		case text == "/help" || text == "üìñ –ø–æ–º–æ—â—å":
			help := "üìö –ö–æ–º–∞–Ω–¥—ã:\n" +
				"/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n" +
				"–ù–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å\n" +
				"/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, help)
			msg.ReplyMarkup = menu
			bot.Send(msg)

		// /menu
		case text == "/menu":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üìã –ú–µ–Ω—é")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		// –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥: "—á–µ—Ä–µ–∑ N –µ–¥–∏–Ω–∏—Ü–∞ —Ç–µ–∫—Å—Ç"
		case strings.HasPrefix(text, "—á–µ—Ä–µ–∑ "):
			if dur, note, ok := parseNatural(text); ok {
				schedule(bot, upd.Message.Chat.ID, dur, note)
			} else {
				msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "‚õî –§–æ—Ä–º–∞—Ç: —á–µ—Ä–µ–∑ 5 —Å–µ–∫ —Ç–µ–∫—Å—Ç")
				msg.ReplyMarkup = menu
				bot.Send(msg)
			}

		// /remind –∫–æ–º–∞–Ω–¥–∞
		case strings.HasPrefix(text, "/remind"):
			parts := strings.SplitN(text, " ", 3)
			if len(parts) < 3 {
				msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "‚ö†Ô∏è /remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>")
				msg.ReplyMarkup = menu
				bot.Send(msg)
			} else if dur, note, ok := parseNatural(parts[1] + " " + parts[2]); ok {
				schedule(bot, upd.Message.Chat.ID, dur, note)
			} else {
				msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "‚õî –§–æ—Ä–º–∞—Ç: /remind 10s —Ç–µ–∫—Å—Ç")
				msg.ReplyMarkup = menu
				bot.Send(msg)
			}

		// –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
		default:
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "ü§ñ –ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ /help")
			msg.ReplyMarkup = menu
			bot.Send(msg)
		}
	}
}

// schedule –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–æ —Ç–∞–π–º–µ—Ä—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
func schedule(bot *tgbotapi.BotAPI, chatID int64, d time.Duration, note string) {
	confirm := tgbotapi.NewMessage(chatID, "‚è≥ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ "+d.String())
	bot.Send(confirm)
	go func() {
		time.Sleep(d)
		bot.Send(tgbotapi.NewMessage(chatID, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+note))
	}()
}

var re = regexp.MustCompile(`—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥[—ã]?|—Å–µ–∫|—Å|–º–∏–Ω—É—Ç[—ã]?|–º–∏–Ω|m|—á–∞—Å[–∞–æ–≤]?|—á|h)\s*(.*)`)

// parseNatural —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç duration, note, ok
func parseNatural(text string) (time.Duration, string, bool) {
	m := re.FindStringSubmatch(text)
	if len(m) != 4 {
		return 0, "", false
	}
	num, unit, note := m[1], m[2], m[3]
	var suf string
	switch {
	case strings.HasPrefix(unit, "—Å–µ–∫"), unit == "—Å":
		suf = "s"
	case strings.HasPrefix(unit, "–º–∏–Ω"), unit == "m":
		suf = "m"
	case strings.HasPrefix(unit, "—á–∞—Å"), unit == "h", unit == "—á":
		suf = "h"
	default:
		return 0, "", false
	}
	d, err := time.ParseDuration(num + suf)
	if err != nil {
		return 0, "", false
	}
	return d, note, true
}
