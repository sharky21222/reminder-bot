package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Reminder struct {
	ID     string
	ChatID int64
	Note   string
	At     time.Time
}

var (
	// —Ä–µ–≥—ç–∫—Å–ø –¥–ª—è –ø–æ–∏—Å–∫–∞ "—á–∏—Å–ª–æ + –µ–¥–∏–Ω–∏—Ü–∞ + —Ç–µ–∫—Å—Ç"
	re        = regexp.MustCompile(`(\d+)\s*(—Å–µ–∫—É–Ω–¥[—ã]?|—Å–µ–∫|—Å|–º–∏–Ω—É—Ç[—ã]?|–º–∏–Ω|m|—á–∞—Å[–∞–æ–≤]?|—á|h)\s*(.*)`)
	reminders = make([]Reminder, 0)
	mu        sync.Mutex
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("üö´ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	// health‚Äëcheck endpoint
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("OK"))
	})
	go http.ListenAndServe(":8081", nil)

	// –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ" –∏ "–°–ø–∏—Å–æ–∫"
	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ"),
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫"),
		),
	)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for upd := range updates {
		// inline callback
		if upd.CallbackQuery != nil {
			handleCallback(bot, upd.CallbackQuery)
			continue
		}

		if upd.Message == nil {
			continue
		}
		text := strings.TrimSpace(strings.ToLower(upd.Message.Text))

		// /start –∏–ª–∏ "–ø—Ä–∏–≤–µ—Ç" ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
		if text == "/start" || strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") {
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç‚Äë–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.")
			msg.ReplyMarkup = menu
			bot.Send(msg)
			continue
		}

		switch {
		case text == "üìù –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID,
				"‚úç –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		case text == "üìã —Å–ø–∏—Å–æ–∫":
			showList(bot, upd.Message.Chat.ID)

		case text == "/help":
			help := "üìö –ö–æ–º–∞–Ω–¥—ã:\n" +
				"/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n" +
				"–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å\n" +
				"üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞\n" +
				"üìã –°–ø–∏—Å–æ–∫ ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, help))

		default:
			if dur, note, ok := parseAny(text); ok {
				schedule(bot, upd.Message.Chat.ID, dur, note)
			}
		}
	}
}

func schedule(bot *tgbotapi.BotAPI, chatID int64, d time.Duration, note string) {
	at := time.Now().Add(d)
	id := fmt.Sprintf("%d_%d", chatID, at.UnixNano())

	mu.Lock()
	reminders = append(reminders, Reminder{ID: id, ChatID: chatID, Note: note, At: at})
	mu.Unlock()

	bot.Send(tgbotapi.NewMessage(chatID, "‚è≥ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ "+d.String()))
	go func() {
		time.Sleep(d)
		bot.Send(tgbotapi.NewMessage(chatID, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+note))
		removeByID(id)
	}()
}

func showList(bot *tgbotapi.BotAPI, chatID int64) {
	mu.Lock()
	defer mu.Unlock()

	var lines []string
	var rows [][]tgbotapi.InlineKeyboardButton

	for _, r := range reminders {
		if r.ChatID != chatID {
			continue
		}
		remaining := time.Until(r.At).Truncate(time.Second)
		lines = append(lines, fmt.Sprintf("‚Ä¢ %s (—á–µ—Ä–µ–∑ %s)", r.Note, remaining))
		btn := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å", r.ID),
		)
		rows = append(rows, btn)
	}

	if len(lines) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"))
		return
	}

	msg := tgbotapi.NewMessage(chatID, "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"+strings.Join(lines, "\n"))
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

func handleCallback(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery) {
	removeByID(cq.Data)

	// –æ—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
	callback := tgbotapi.NewCallback(cq.ID, "–£–¥–∞–ª–µ–Ω–æ")
	if _, err := bot.Request(callback); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback:", err)
	}

	bot.Send(tgbotapi.NewMessage(cq.Message.Chat.ID, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"))
}

func removeByID(id string) {
	mu.Lock()
	defer mu.Unlock()
	for i, r := range reminders {
		if r.ID == id {
			reminders = append(reminders[:i], reminders[i+1:]...)
			return
		}
	}
}

func parseAny(text string) (time.Duration, string, bool) {
	text = strings.TrimPrefix(text, "/remind ")
	text = strings.TrimPrefix(text, "–Ω–∞–ø–æ–º–Ω–∏ ")
	m := re.FindStringSubmatch(text)
	if len(m) != 4 {
		return 0, "", false
	}
	num, unit, note := m[1], m[2], m[3]
	var suf string
	switch {
	case strings.HasPrefix(unit, "—Å–µ–∫"), unit == "—Å":
		suf = "s"
	case strings.HasPrefix(unit, "–º–∏–Ω"), unit == "m":
		suf = "m"
	case strings.HasPrefix(unit, "—á–∞—Å"), unit == "h", unit == "—á":
		suf = "h"
	default:
		return 0, "", false
	}
	d, err := time.ParseDuration(num + suf)
	if err != nil {
		return 0, "", false
	}
	return d, note, true
}
