package main

import (
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("üö´ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err)
	}

	// Health-check
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
		w.Write([]byte("‚úÖ OK"))
	})
	go http.ListenAndServe(":8081", nil)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ..."),
			tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
		),
	)

	for upd := range updates {
		if upd.Message == nil {
			continue
		}
		msgText := strings.ToLower(upd.Message.Text)

		switch {
		case msgText == "/start":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		case msgText == "/help", strings.Contains(msgText, "–ø–æ–º–æ—â—å"):
			help := "üìö –ö–æ–º–∞–Ω–¥—ã:\n" +
				"/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> ‚Äî –ø—Ä–∏–º–µ—Ä: /remind 10s –≤—ã–π—Ç–∏\n" +
				"–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ —á–µ—Ä–µ–∑ <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> ‚Äî –ø—Ä–∏–º–µ—Ä: –ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –≤—ã–ø–∏—Ç—å —á–∞–π"
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, help))

		case msgText == "/menu":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		case strings.HasPrefix(msgText, "/remind"):
			handleRemind(bot, upd, msgText)

		case strings.Contains(msgText, "–Ω–∞–ø–æ–º–Ω–∏") && strings.Contains(msgText, "—á–µ—Ä–µ–∑"):
			parseNatural(bot, upd, msgText)

		default:
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "ü§ñ –ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."))
		}
	}
}

func handleRemind(bot *tgbotapi.BotAPI, upd tgbotapi.Update, text string) {
	parts := strings.SplitN(text, " ", 3)
	if len(parts) < 3 {
		bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚ö†Ô∏è /remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>"))
		return
	}
	d, err := time.ParseDuration(parts[1])
	if err != nil {
		bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚ùå –í—Ä–µ–º—è –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∏–º–µ—Ä: 10s, 2m, 1h"))
		return
	}
	bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚è≥ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ "+parts[1]))
	go func(id int64, delay time.Duration, msg string) {
		time.Sleep(delay)
		bot.Send(tgbotapi.NewMessage(id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+msg))
	}(upd.Message.Chat.ID, d, parts[2])
}

func parseNatural(bot *tgbotapi.BotAPI, upd tgbotapi.Update, text string) {
	// –ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ–ø–∏—Ç—å
	r := regexp.MustCompile(`—á–µ—Ä–µ–∑ (\d+)\s*(—Å–µ–∫—É–Ω–¥[—ã]?|—Å–µ–∫|s|–º–∏–Ω—É—Ç[—ã]?|–º–∏–Ω|m|—á–∞—Å[–∞–æ–≤]*|—á|h)\s*(.*)?`)
	m := r.FindStringSubmatch(text)
	if len(m) < 4 {
		bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü—Ä–∏–º–µ—Ä: –ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ"))
		return
	}

	value := m[1]
	unit := strings.ToLower(m[2])
	message := m[3]

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ duration
	var duration time.Duration
	switch {
	case strings.HasPrefix(unit, "—Å–µ–∫"):
		duration, _ = time.ParseDuration(value + "s")
	case strings.HasPrefix(unit, "–º–∏–Ω"):
		duration, _ = time.ParseDuration(value + "m")
	case strings.HasPrefix(unit, "—á"):
		duration, _ = time.ParseDuration(value + "h")
	default:
		bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏"))
		return
	}

	bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID, "üïê –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ "+value+" "+unit))
	go func(id int64, d time.Duration, msg string) {
		time.Sleep(d)
		bot.Send(tgbotapi.NewMessage(id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+msg))
	}(upd.Message.Chat.ID, duration, message)
}
