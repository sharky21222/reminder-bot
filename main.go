package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"regexp"
	"sort"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Reminder struct {
	ID       string
	ChatID   int64
	Note     string
	At       time.Time
	Category string
}

var (
	re        = regexp.MustCompile(`(\d+)\s*(—Å–µ–∫—É–Ω–¥[—ã]?|—Å–µ–∫|—Å|–º–∏–Ω—É—Ç[—ã]?|–º–∏–Ω|m|—á–∞—Å[–∞–æ–≤]?|—á|h)\s*(.*)`)
	reminders = make([]Reminder, 0)
	mu        sync.Mutex
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("üö´ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("OK"))
	})
	go http.ListenAndServe(":8081", nil)

	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ"),
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫"),
		),
	)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for upd := range updates {
		if upd.CallbackQuery != nil {
			handleCallback(bot, upd.CallbackQuery)
			continue
		}
		if upd.Message == nil {
			continue
		}
		text := strings.TrimSpace(strings.ToLower(upd.Message.Text))

		if text == "/start" || strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") {
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç‚Äë–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.")
			msg.ReplyMarkup = menu
			bot.Send(msg)
			continue
		}

		switch {
		case text == "üìù –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ":
			msg := tgbotapi.NewMessage(upd.Message.Chat.ID,
				"‚úç –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n–Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		case text == "üìã —Å–ø–∏—Å–æ–∫":
			showList(bot, upd.Message.Chat.ID)

		case text == "/help":
			bot.Send(tgbotapi.NewMessage(upd.Message.Chat.ID,
				"üìö –ö–æ–º–∞–Ω–¥—ã:\n"+
					"/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n"+
					"–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å\n"+
					"üìù –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞\n"+
					"üìã –°–ø–∏—Å–æ–∫ ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"))

		default:
			if dur, note, ok := parseAny(text); ok {
				schedule(bot, upd.Message.Chat.ID, dur, note)
			}
		}
	}
}

func schedule(bot *tgbotapi.BotAPI, chatID int64, d time.Duration, note string) {
	at := time.Now().Add(d)
	id := fmt.Sprintf("%d_%d", chatID, at.UnixNano())
	category := classify(note)

	mu.Lock()
	reminders = append(reminders, Reminder{ID: id, ChatID: chatID, Note: note, At: at, Category: category})
	mu.Unlock()

	bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"‚è≥ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ %s\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s", d.String(), category)))
	go func() {
		time.Sleep(d)
		bot.Send(tgbotapi.NewMessage(chatID, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+note))
		removeByID(id)
	}()
}

func showList(bot *tgbotapi.BotAPI, chatID int64) {
	mu.Lock()
	defer mu.Unlock()

	groups := map[string][]Reminder{}
	for _, r := range reminders {
		if r.ChatID == chatID {
			groups[r.Category] = append(groups[r.Category], r)
		}
	}
	if len(groups) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"))
		return
	}

	cats := make([]string, 0, len(groups))
	for c := range groups {
		cats = append(cats, c)
	}
	sort.Strings(cats)

	var lines []string
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, cat := range cats {
		lines = append(lines, fmt.Sprintf("üîñ *%s*:", cat))
		for _, r := range groups[cat] {
			remaining := time.Until(r.At).Truncate(time.Second)
			lines = append(lines, fmt.Sprintf("‚Ä¢ %s (—á–µ—Ä–µ–∑ %s)", r.Note, remaining))
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å", r.ID),
			))
		}
		lines = append(lines, "")
	}

	msg := tgbotapi.NewMessage(chatID, strings.Join(lines, "\n"))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

func handleCallback(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery) {
	removeByID(cq.Data)
	callback := tgbotapi.NewCallback(cq.ID, "–£–¥–∞–ª–µ–Ω–æ")
	bot.Request(callback)
	bot.Send(tgbotapi.NewMessage(cq.Message.Chat.ID, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"))
}

func removeByID(id string) {
	mu.Lock()
	defer mu.Unlock()
	for i, r := range reminders {
		if r.ID == id {
			reminders = append(reminders[:i], reminders[i+1:]...)
			return
		}
	}
}

// classify –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Ç–µ–º—É –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –Ω–∞–±–æ—Ä—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
func classify(text string) string {
	switch {
	// –†–∞–±–æ—Ç–∞
	case containsAny(text,
		"–∫–æ–¥", "–ø—Ä–æ–µ–∫—Ç", "–≤—Å—Ç—Ä–µ—á–∞", "–º–∏—Ç–∏–Ω–≥", "–¥–µ–¥–ª–∞–π–Ω", "–æ—Ç—á–µ—Ç", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–¥–æ–∫–ª–∞–¥", "–∑–∞–¥–∞—á–∞", "—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"):
		return "–†–∞–±–æ—Ç–∞"

	// –£—á—ë–±–∞
	case containsAny(text,
		"–ª–µ–∫—Ü–∏—è", "—Å–µ–º–∏–Ω–∞—Ä", "–¥–∑", "—ç–∫–∑–∞–º–µ–Ω", "—Ç–µ—Å—Ç", "—Ä–µ—Ñ–µ—Ä–∞—Ç", "–∫—É—Ä—Å", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–∫–æ–ª–ª–µ–¥–∂", "—à–∫–æ–ª–∞", "—É—á–∏—Ç—å", "–ø–∞—Ä–∞–º", "–ª–∞–±–∞"):
		return "–£—á—ë–±–∞"

	// –ó–¥–æ—Ä–æ–≤—å–µ
	case containsAny(text,
		"—Å–ø–æ—Ä—Ç", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–ø—Ä–æ–≥—É–ª–∫–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–∞–ø—Ç–µ–∫–∞", "–ª–µ–∫–∞—Ä—Å—Ç–≤–æ", "–¥–∏–µ—Ç–∞", "–≤—Ä–∞—á", "–∞–Ω–∞–ª–∏–∑", "–π–æ–≥–∞", "–º–µ–¥–∏—Ç–∞—Ü–∏—è"):
		return "–ó–¥–æ—Ä–æ–≤—å–µ"

	// –î–æ–º –∏ –±—ã—Ç
	case containsAny(text,
		"—É–±–æ—Ä–∫–∞", "—Å—Ç–∏—Ä–∫–∞", "–≥–æ—Ç–æ–≤–∫–∞", "–ø–æ–º—ã—Ç—å", "—Ä–µ–º–æ–Ω—Ç", "–∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", "–ø–æ—Å—É–¥–∞", "–º—É—Å–æ—Ä", "–ø—Ä–∞—á–∫–∞", "—Å–∞–¥"):
		return "–î–æ–º"

	// –ü–æ–∫—É–ø–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã
	case containsAny(text,
		"–∫—É–ø–∏—Ç—å", "–∑–∞–∫–∞–∑–∞—Ç—å", "–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–±—é–¥–∂–µ—Ç", "—Å—á–µ—Ç–∞", "–æ–ø–ª–∞—Ç–∏—Ç—å", "–ø–ª–∞—Ç–µ–∂", "–Ω–∞–ª–æ–≥–∏", "–±–∞–Ω–∫", "–∫–∞—Ä—Ç–∞", "—Ä–∞—Å—Ö–æ–¥"):
		return "–ü–æ–∫—É–ø–∫–∏/–§–∏–Ω–∞–Ω—Å—ã"

	// –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
	case containsAny(text,
		"–∫–∏–Ω–æ", "—Å–µ—Ä–∏–∞–ª", "–∏–≥—Ä–∞", "–º—É–∑—ã–∫–∞", "–∫–Ω–∏–≥–∞", "–≤—Å—Ç—Ä–µ—á–∞ —Å", "–≤–µ—á–µ—Ä–∏–Ω–∫–∞", "–æ—Ç–¥—ã—Ö", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", "—Ö–æ–±–±–∏", "–∫–æ–Ω—Ü–µ—Ä—Ç"):
		return "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"

	default:
		return "–î—Ä—É–≥–æ–µ"
	}
}

func containsAny(s string, keywords ...string) bool {
	for _, k := range keywords {
		if strings.Contains(s, k) {
			return true
		}
	}
	return false
}

func parseAny(text string) (time.Duration, string, bool) {
	text = strings.TrimPrefix(text, "/remind ")
	text = strings.TrimPrefix(text, "–Ω–∞–ø–æ–º–Ω–∏ ")
	m := re.FindStringSubmatch(text)
	if len(m) != 4 {
		return 0, "", false
	}
	num, unit, note := m[1], m[2], m[3]
	var suf string
	switch {
	case strings.HasPrefix(unit, "—Å–µ–∫"), unit == "—Å":
		suf = "s"
	case strings.HasPrefix(unit, "–º–∏–Ω"), unit == "m":
		suf = "m"
	case strings.HasPrefix(unit, "—á–∞—Å"), unit == "h", unit == "—á":
		suf = "h"
	default:
		return 0, "", false
	}
	d, err := time.ParseDuration(num + suf)
	if err != nil {
		return 0, "", false
	}
	return d, note, true
}
